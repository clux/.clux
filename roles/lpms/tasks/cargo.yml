---
# install rust components via rustup and cargo

# fetch stable toolchain
- name: rustup update stable
  command: rustup update stable
  register: stable_output
  changed_when:
  - "'downloading' in stable_output.stderr"

# make sure it's set up properly before we use it
- name: rustup default stable
  command: rustup default stable
  register: rustup_result
  changed_when: "'unchanged' not in rustup_result.stdout"

# because we most frequently need to recompile nightly modules, do nightly stuff first
- name: rustup update nightly
  command: rustup update nightly
  when: recompile_tasks | default(false)
  register: nightly_output
  changed_when:
  - "'downloading' in nightly_output.stderr"

- name: rustup update rls on nightly
  command: rustup update nightly
  when: recompile_tasks | default(false)
  register: nightly_output
  changed_when:
  - "'downloading' in nightly_output.stderr"
  with_items:
  - "component add rls-preview --toolchain nightly"
  - "component add rust-analysis --toolchain nightly"
  - "component add rust-src --toolchain nightly"

- name: install modules on rustup nightly
  command: rustup run nightly cargo install {{ item }} --force
  with_items: []
  when:
  - (recompile_tasks | default(false)) or nightly_output.changed

# rls should use stable src
- name: rustup updates
  command: rustup {{ item }}
  when:
  - (upgrade_tasks | default(false)) or stable_output.changed
  register: command_result
  changed_when:
  - "'downloading' in command_result.stderr"
  with_items:
  - "component add rust-src"
  - "component add rustfmt-preview"
  - "component add clippy-preview"
  - "component add rls-preview"
  - "component add rust-analysis"

# finally, do the large batch of stable modules (if needed)
- name: install modules on rustup stable
  command: cargo install {{ item }} --force
  when:
  - (recompile_tasks | default(false)) or stable_output.changed
  with_items:
  - racer
  - cargo-edit
  - cargo-tree
  - cargo-outdated
  #- cargo-tarpaulin (nightly)
  - cargo-audit
  - cargo-expand
  - choose
  - du-dust
  - procs
  - ytop
  - grex

- name: diesel cli (assumes you have libpq)
  command: cargo install diesel_cli --no-default-features --features postgres --force
  when:
  - (recompile_tasks | default(false)) or stable_output.changed

- name: Link rustc-stable to rustup stable source location (I point racer there)
  file:
    src="/home/{{ user }}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust"
    dest="/home/{{ user }}/.cargo/rustc-stable"
    state=link
    force=yes
